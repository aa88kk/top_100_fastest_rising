306, pingme, https://github.com/kha7iq/pingme, "PingMe is a CLI tool which provides the ability to send messages or alerts to multiple messaging platforms & email.", "slack,cli,alert,telegram,email,discord,messaging,pushover,mattermost,rocketchat,microsoft-teams,pingme", 2021-04-13 13:49:32 +0000 UTC
219, vulndb, https://github.com/golang/vulndb, "The Go Vulnerability Database", "", 2021-04-16 11:56:49 +0000 UTC
150, gronx, https://github.com/adhocore/gronx, "Lightweight, fast and dependency-free Cron expression parser (due checker), task scheduler and/or daemon for Golang (tested on v1.13 and above) and standalone usage", "go,golang,parser,crontab,daemon,scheduler,parser-library,job-scheduler,cron-expression,cronjob,task-manager,task-scheduler,cron-parser,cron-expression-parser,job-manager,cron-pattern,adhocore", 2021-04-21 06:14:03 +0000 UTC
124, pint, https://github.com/cloudflare/pint, "Prometheus rule linter", "prometheus", 2021-04-23 02:02:50 +0000 UTC
114, kubegres, https://github.com/reactive-tech/kubegres, "Kubegres is a Kubernetes operator allowing to create a cluster of PostgreSql instances and manage databases replication, failover and backup.", "", 2021-04-12 20:51:59 +0000 UTC
110, go-snowflake, https://github.com/godruoyi/go-snowflake, "❄ An Lock Free ID Generator for Golang based on Snowflake Algorithm (Twitter announced).", "snowflake,go-snowflake", 2021-04-15 03:05:28 +0000 UTC
104, go-fsimpl, https://github.com/hairyhenderson/go-fsimpl, "Go filesystem implementations for various URL schemes", "", 2021-04-13 16:15:36 +0000 UTC
94, p2ptunnel, https://github.com/chenjia404/p2ptunnel, "一个基于p2p的tcp、udp内网穿透隧道工具", "", 2021-04-14 13:24:37 +0000 UTC
90, datree, https://github.com/datreeio/datree, "Prevent Kubernetes misconfigurations from reaching production (again 😤 )! The CLI integration provides a policy enforcement solution to run automatic checks for rule violations. See our docs: https://hub.datree.io", "kubernetes,cli,static-code-analysis,best-practices,policy,infrastructure-management,guardrail,datree", 2021-04-14 11:44:56 +0000 UTC
88, htui, https://github.com/PierreKieffer/htui, "Heroku Terminal User Interface", "heroku,terminal-based", 2021-04-11 09:18:42 +0000 UTC
85, translator, https://github.com/SpecializedGeneralist/translator, "A simple self-hostable Machine Translation service, powered by spaGO", "", 2021-04-21 16:37:36 +0000 UTC
71, aws-enumerator, https://github.com/shabarkin/aws-enumerator, "The AWS Enumerator was created for service enumeration and info dumping for investigations of penetration testers during Black-Box testing. The tool is intended to speed up the process of Cloud review in case the security researcher compromised AWS Account Credentials.", "aws,security,security-audit,cloud,hacking,security-tools", 2021-04-11 14:49:14 +0000 UTC
71, beer-shop, https://github.com/go-kratos/beer-shop, "An online shop application, the complete microservices demo for kratos.", "", 2021-04-11 03:10:46 +0000 UTC
71, tmplfunc, https://github.com/rsc/tmplfunc, "Go templates invoked as functions", "", 2021-05-06 13:43:32 +0000 UTC
69, gidevice, https://github.com/electricbubble/gidevice, "communicate with iOS devices implemented with Golang", "golang,ios,xcode,iphone,xctest,golang-library,libimobiledevice,usbmuxd,gomod,gomodule", 2021-04-14 02:01:54 +0000 UTC
68, sealer, https://github.com/alibaba/sealer, "Build share and run your distributed applications.", "docker,kubernetes,golang,installer,cloudimage", 2021-04-29 03:13:48 +0000 UTC
53, didder, https://github.com/makeworld-the-better-one/didder, "An extensive, fast, and accurate command-line image dithering tool.", "command-line,dithering-algorithms,floyd-steinberg,dithering-images,ordered-dithering", 2021-04-29 17:57:07 +0000 UTC
52, k8s-diagrams, https://github.com/Trois-Six/k8s-diagrams, "Create diagrams from the Kubernetes API with go-diagrams.", "kubernetes,diagrams", 2021-04-26 13:44:26 +0000 UTC
52, plotng, https://github.com/maded2/plotng, "", "", 2021-04-11 03:08:35 +0000 UTC
50, golang-nextjs-portable, https://github.com/dstotijn/golang-nextjs-portable, "Go program with embedded Next.js app.", "golang,nextjs,embed", 2021-04-26 19:48:36 +0000 UTC
50, secrets-store-csi-driver-provider-aws, https://github.com/aws/secrets-store-csi-driver-provider-aws, "", "", 2021-04-14 18:38:10 +0000 UTC
50, goldmark-pdf, https://github.com/stephenafamo/goldmark-pdf, "A PDF renderer for the goldmark markdown parser.", "go,markdown,golang,pdf,commonmark,goldmark,goldmark-extension", 2021-04-20 18:05:22 +0000 UTC
49, roxy, https://github.com/chronos-tachyon/roxy, "Roxy the Frontend Proxy", "letsencrypt,golang,proxy,grpc,autocert,roxy,frontend-proxy,rewrite-headers", 2021-04-11 23:34:46 +0000 UTC
46, lark, https://github.com/go-lark/lark, "An easy-to-use unofficial SDK for Feishu and Lark Open Platform", "feishu,larksuite,feishu-sdk,lark-sdk", 2021-04-20 12:09:03 +0000 UTC
44, weebsay, https://github.com/irevenko/weebsay, "🎭👄 Like cowsay but it's random anime quote", "go,cli,golang,anime,weeb,cowsay,cli-app,terminal-app,weebdev", 2021-05-07 08:12:18 +0000 UTC
42, codename, https://github.com/lucasepe/codename, "Generate random, pronounceable, sometimes even memorable, \"superhero like\" codenames - just like Docker does with container names.", "golang,random,superheroes,names-generator,rfc1178", 2021-05-09 09:15:35 +0000 UTC
40, boyermoore, https://github.com/sarpdag/boyermoore, "Implementation of Boyer-Moore fast string search algorithm in Go", "", 2021-04-24 19:29:25 +0000 UTC
40, bofied, https://github.com/pojntfx/bofied, "Modern network boot server.", "pxe-boot,ipxe,netboot,network-boot,http-server,dhcp-server,pxe,webdav-server,tftp-server,proxy-dhcp", 2021-04-14 21:43:11 +0000 UTC
38, covaccine-notifier, https://github.com/PrasadG193/covaccine-notifier, "CoWIN Vaccine availability notifier for India", "monitor,notifier,india,availability-monitor,vaccination,covid-19,vaccine-availability", 2021-05-02 16:49:02 +0000 UTC
37, udpt, https://github.com/balacode/udpt, "UDP Transport: compress, encrypt and send any data reliably over unreliable UDP connections", "communication-protocol,udp,messaging", 2021-04-26 10:28:04 +0000 UTC
37, gan-go, https://github.com/LdDl/gan-go, "Generative Adversarial Network in Go via Gorgonia", "machine-learning,deep-learning,neural-network,generative-adversarial-network,gan,neural-networks,gorgonia", 2021-04-25 17:23:02 +0000 UTC
34, visp, https://github.com/ambientsound/visp, "Visp is a Vi-like Spotify client for terminal users.", "vim,golang,spotify,terminal", 2021-04-13 17:50:03 +0000 UTC
33, ecsk, https://github.com/yukiarrr/ecsk, "CLI tool that you can interactively call Amazon ECS APIs (run-task, execute-command, stop-task), copy files between ECS and local, and view logs.", "cli,transfer,amazon-ecs,ecs-exec", 2021-04-22 07:45:34 +0000 UTC
31, cider, https://github.com/leyafo/cider, "See example: https://www.leyafo.com", "", 2021-04-21 04:01:36 +0000 UTC
30, safebox, https://github.com/xtaci/safebox, "One key to derive all", "", 2021-04-17 15:06:15 +0000 UTC
29, inspr, https://github.com/inspr/inspr, "Inspr is an agnostic application mesh for simpler, faster, and securer development of distributed applications (dApps).", "kubernetes,golang,security,registry,devops,automation,microservices,kafka,integration,cluster,helm,architecture,service-bus,container,kubernetes-cluster,broker,developer-tools,cloud-native,service-mesh,application-mesh", 2021-04-12 12:17:10 +0000 UTC
28, litestream-library-example, https://github.com/benbjohnson/litestream-library-example, "Example repository for embedding Litestream in a Go application.", "", 2021-04-29 21:48:17 +0000 UTC
27, Psyduck, https://github.com/SmartKeyerror/Psyduck, "Record CS knowlegement with XMind, version 2.0. 使用 XMind 记录 Linux 操作系统，网络，C++，Golang 以及数据库的一些设计", "linux,golang,database,network,os,xmind", 2021-04-21 09:22:04 +0000 UTC
27, kenny, https://github.com/smf8/kenny, "A yet to be voice call application in terminal. with the power of go and webRTC (pion).", "", 2021-04-17 14:44:34 +0000 UTC
25, linkpage, https://github.com/rhnvrm/linkpage, "LinkPage is a FOSS self-hosted alternative to link listing websites such as LinkTree and Campsite.bio", "", 2021-04-16 16:46:53 +0000 UTC
24, amalloc, https://github.com/NithinChintala/amalloc, "", "", 2021-05-01 20:04:24 +0000 UTC
24, censor-shell, https://github.com/iann0036/censor-shell, "Censors or hides shell / Bash / console output based on defined patterns - great for hiding secrets in demos!", "shell,bash,asciinema", 2021-04-22 11:41:28 +0000 UTC
23, slo-computer, https://github.com/last9/slo-computer, "SLOs, Error windows and alerts are complicated. Here an attempt to make it easy", "metrics,slo,sre,observability,sli,service-level-objective,service-level-indicator,sla,sre-team", 2021-04-29 02:53:24 +0000 UTC
23, AccountGeneratorBot, https://github.com/anonyindian/AccountGeneratorBot, "Golang Based Account Generator Telegram Bot", "", 2021-04-18 10:02:18 +0000 UTC
22, frongo, https://github.com/eleby/frongo, "Frongo is a Golang package to create HTML/CSS components using only the Go language.", "", 2021-04-25 00:26:59 +0000 UTC
22, echo-admin, https://github.com/RealLiuSha/echo-admin, "基于 Echo + Gorm + Casbin + Uber-FX 实现的 RBAC 权限管理脚手架，致力于提供一套尽可能轻量且优雅的中后台解决方案。", "go,golang,admin,zap,rbac,gorm,fx,echo-framework,casbin,echo-admin", 2021-04-28 08:50:13 +0000 UTC
22, astral, https://github.com/sj14/astral, "☀️ Go calculations for the position of the sun and moon.", "sunrise,sunset,moon,midnight,moon-phase,dawn,golden-hour,blue-hour,dusk,noon", 2021-04-11 13:50:56 +0000 UTC
21, go-data-gov-gr-sdk, https://github.com/ppapapetrou76/go-data-gov-gr-sdk, "A go SDK for the data available via data.gov.gr", "", 2021-04-23 17:14:47 +0000 UTC
19, pprofutils, https://github.com/felixge/pprofutils, "", "", 2021-04-13 16:11:41 +0000 UTC
19, dive-into-chia, https://github.com/chuwt/dive-into-chia, "chia深入研究以及一些工具(WIP)", "blockchain,chia,chia-blockchain", 2021-04-26 03:41:36 +0000 UTC
19, starlink_exporter, https://github.com/danopstech/starlink_exporter, "📡  Prometheus exporter that exposes metrics from SpaceX Starlink Dish", "docker,metrics,prometheus,prometheus-exporter,spacex,starlink,metrics-exported", 2021-04-13 16:31:14 +0000 UTC
18, Hostloc_Avatar, https://github.com/SycAlright/Hostloc_Avatar, "Discuz全系列通用头像一键上传工具，免登录，无需Cookie，拒绝Flash，非Js脚本", "", 2021-05-02 13:35:10 +0000 UTC
18, thank-you-stars, https://github.com/sanposhiho/thank-you-stars, "Give your dependencies stars on GitHub! 🌟", "go,golang", 2021-04-17 05:57:23 +0000 UTC
18, movie-box, https://github.com/sithumonline/movie-box, "Download movie from YTS", "docker,golang,torrent,movie", 2021-05-03 07:32:13 +0000 UTC
18, dump-hub, https://github.com/x0e1f/dump-hub, "Self hosted search engine for data leaks and password dumps", "docker,search-engine,elasticsearch,self-hosted,password-dump", 2021-04-15 20:03:30 +0000 UTC
18, go-conference-2021-spring-office-hour, https://github.com/mercari/go-conference-2021-spring-office-hour, "", "", 2021-04-22 07:24:00 +0000 UTC
17, gena, https://github.com/x1ah/gena, "导航网站生成器(Start page generator)", "navigation,startpage,nav,webstack,startpage-generator,navigation-generator", 2021-04-14 16:01:19 +0000 UTC
17, CryptoFiscaFacile, https://github.com/fiscafacile/CryptoFiscaFacile, "Outil (en ligne de commande pour l'instant) vous permettant de rassembler toutes les transactions de vos différents échanges et wallets afin de constituer votre portefeuille global et ainsi vous aider à la déclaration fiscale française.", "crypto,fiscalization,crytpocurrency", 2021-04-24 09:55:36 +0000 UTC
16, njs-xfer, https://github.com/derekcollison/njs-xfer, "NATS example to store and retrieve large file assets from JetStream.", "", 2021-04-11 18:12:12 +0000 UTC
16, event-go, https://github.com/itchyny/event-go, "Simple synchronous event pub-sub package for Golang", "", 2021-04-17 06:18:10 +0000 UTC
16, zoom-ci, https://github.com/zoom-ci/zoom-ci, "Zoom-CI（简称Zoom），是一个轻量易安装的自动化部署工具，支持本地和远程两种项目部署类型。", "go,devops,automation,deploy,ci-cd,zoom,zoom-ci", 2021-04-14 23:16:06 +0000 UTC
15, canard, https://github.com/mrusme/canard, "Canard. A command line TUI client for the journalist RSS aggregator.", "cli,commandline,rss,command-line,rss-reader,tui,command-line-tool,commandline-interface,text-user-interface,commandline-tool,canard,journalist", 2021-04-11 21:54:01 +0000 UTC
15, boilit, https://github.com/gennaro-tedesco/boilit, "create boilerplate structure for neovim plugins", "", 2021-04-12 23:19:32 +0000 UTC
15, iftar-bot, https://github.com/barbarbar338/iftar-bot, "🕌 Iftar Bot, Plays Ezan sound on iftar time (Ramadan special ✨)", "go,golang,discord,discord-bot,discordgo,iftar,ramadan,ezan,ramadan-mubarak", 2021-04-16 11:11:14 +0000 UTC
15, go-gearman, https://github.com/rfyiamcool/go-gearman, "golang job dispatcher", "gearman,dispatcher", 2021-04-15 07:12:57 +0000 UTC
15, lark, https://github.com/chyroc/lark, "Feishu/Lark Open API Go Sdk, Support ALL Open API and Event Callback.", "go,sdk,openapi,lark,feishu,larksuite,feishu-sdk,lark-sdk,feishu-bot,larksuite-sdk", 2021-04-21 16:11:25 +0000 UTC
15, mosdns-cn, https://github.com/IrineSistiana/mosdns-cn, "一个 DNS 转发器。", "chinadns,mosdns", 2021-04-25 13:29:56 +0000 UTC
15, preflight, https://github.com/SpectralOps/preflight, "preflight helps you verify scripts and executables to mitigate chain of supply attacks such as the recent Codecov hack.", "golang,security,devops,devsecops", 2021-04-29 10:37:33 +0000 UTC
15, mirkwood_engine, https://github.com/Myu-Unix/mirkwood_engine, "2D virtual tabletop prototype", "golang,prototype,fantasy,tabletop,2d,ebiten,ebiten-framework", 2021-04-13 12:57:17 +0000 UTC
14, oc-helm, https://github.com/sabre1041/oc-helm, "oc CLI plugin to interact with Helm features provided by the OpenShift Console", "", 2021-04-25 05:15:41 +0000 UTC
14, go-modular, https://github.com/ajzaff/go-modular, "Software modular synthesizer with Midi support", "", 2021-04-17 15:27:10 +0000 UTC
14, element, https://github.com/gennaro-tedesco/element, "periodic table on the command line", "", 2021-04-17 18:21:33 +0000 UTC
14, tpg, https://github.com/tidwall/tpg, "An insanely tiny Postgres library for Go", "", 2021-05-02 14:29:35 +0000 UTC
14, ransomware, https://github.com/abhir98/ransomware, "Project Summary This project was developed for the Computer Security course at my academic degree. Basically, it will encrypt your files in background using AES-256-CTR, a strong encryption algorithm, using RSA-4096 to secure the exchange with the server, optionally using the Tor SOCKS5 Proxy. The base functionality is what you see in the famous ransomware Cryptolocker.  The project is composed by three parts, the server, the malware and the unlocker.  The server store the victim's identification key along with the encryption key used by the malware.  The malware encrypt with a RSA-4096 (RSA-OAEP-4096 + SHA256) public key any payload before send then to the server. This approach with the optional Tor Proxy and a .onion domain allow you to hide almost completely your server.  Features Run in Background (or not) Encrypt files using AES-256-CTR(Counter Mode) with random IV for each file. Multithreaded. RSA-4096 to secure the client/server communication. Includes an Unlocker. Optional TOR Proxy support. Use an AES CTR Cypher with stream encryption to avoid load an entire file into memory. Walk all drives by default. Docker image for compilation. Building the binaries DON'T RUN ransomware.exe IN YOUR PERSONAL MACHINE, EXECUTE ONLY IN A TEST ENVIRONMENT! I'm not resposible if you acidentally encrypt all of your disks!  First of all download the project outside your $GOPATH:  git clone github.com/mauri870/ransomware cd ransomware If you have Docker skip to the next section.  You need Go at least 1.11.2 with the $GOPATH/bin in your $PATH and $GOROOT pointing to your Go installation folder. For me:  export GOPATH=~/gopath export PATH=$PATH:$GOPATH/bin export GOROOT=/usr/local/go Build the project require a lot of steps, like the RSA key generation, build three binaries, embed manifest files, so, let's leave make do your job:  make deps make You can build the server for windows with make -e GOOS=windows.  Docker ./build-docker.sh make Config Parameters You can change some of the configs during compilation. Instead of run only make, you can use the following variables:  HIDDEN='-H windowsgui' # optional. If present the malware will run in background  USE_TOR=true # optional. If present the malware will download the Tor proxy and use it to contact the server  SERVER_HOST=mydomain.com # the domain used to connect to your server. localhost, 0.0.0.0, 127.0.0.1 works too if you run the server on the same machine as the malware  SERVER_PORT=8080 # the server port, if using a domain you can set this to 80  GOOS=linux # the target os to compile the server. Eg: darwin, linux, windows Example:  make -e USE_TOR=true SERVER_HOST=mydomain.com SERVER_PORT=80 GOOS=darwin  The SERVER_ variables above only apply to the malware. The server has a flag --port that you can use to change the port that it will listen on.  DON'T RUN ransomware.exe IN YOUR PERSONAL MACHINE, EXECUTE ONLY IN A TEST ENVIRONMENT! I'm not resposible if you acidentally encrypt all of your disks!  Step by Step Demo and How it Works For this demo I'll use two machines, my personal linux machine and a windows 10 VM.  For the sake of simplicity, I have a folder mapped to the VM, so I can compile from my linux and copy to the vm.  In this demo we will use the Ngrok tool, this will allow us to expose our server using a domain, but you can use your own domain or ip address if you want. We are also going to enable the Tor transport, so .onion domains will work without problems.  First of all lets start our external domain:  ngrok http 8080 This command will give us a url like http://2af7161c.ngrok.io. Keep this command running otherwise the malware won't reach our server.  Let's compile the binaries (remember to replace the domain):  make -e SERVER_HOST=2af7161c.ngrok.io SERVER_PORT=80 USE_TOR=true The SERVER_PORT needs to be 80 in this case, since ngrok redirects 2af7161c.ngrok.io:80 to your local server port 8080.  After build, a binary called ransomware.exe, and unlocker.exe along with a folder called server will be generated in the bin folder. The execution of ransomware.exe and unlocker.exe (even if you use a diferent GOOS variable during compilation) is locked to windows machines only.  Enter the server directory from another terminal and start it:  cd bin/server && ./server --port 8080 To make sure that all is working correctly, make a http request to http://2af7161c.ngrok.io:  curl http://2af7161c.ngrok.io If you see a OK and some logs in the server output you are ready to go.  Now move the ransomware.exe and unlocker.exe to the VM along with some dummy files to test the malware. You can take a look at cmd/common.go to see some configuration options like file extensions to match, directories to scan, skipped folders, max size to match a file among others.  Then simply run the ransomware.exe and see the magic happens 😄.  The window that you see can be hidden using the HIDDEN option described in the compilation section.  After download, extract and start the Tor proxy, the malware waits until the tor bootstrapping is done and then proceed with the key exchange with the server. The client/server handshake takes place and the client payload, encrypted with an RSA-4096 public key must be correctly decrypted on the server. The victim identification and encryption keys are stored in a Golang embedded database called BoltDB (it also persists on disk). When completed we get into the find, match and encrypt phase, up to N-cores workers start to encrypt files matched by the patterns defined. This proccess is really quick and in seconds all of your files will be gone.  The encryption key exchanged with the server was used to encrypt all of your files. Each file has a random primitive called IV, generated individually and saved as the first 16 bytes of the encrypted content. The algorithm used is AES-256-CTR, a good AES cypher with streaming mode of operation such that the file size is left intact.  The only two sources of information available about what just happen are the READ_TO_DECRYPT.html and FILES_ENCRYPTED.html in the Desktop.  In theory, to decrypt your files you need to send an amount of BTC to the attacker's wallet, followed by a contact sending your ID(located on the file created on desktop). If the attacker can confirm your payment it will possibly(or maybe not) return your encryption key and the unlocker.exe and you can use then to recover your files. This exchange can be accomplished in several ways and WILL NOT be implemented in this project for obvious reasons.  Let's suppose you get your encryption key back. To recover the correct key point to the following url:  curl -k http://2af7161c.ngrok.io/api/keys/:id Where :id is your identification stored in the file on desktop. After, run the unlocker.exe by double click and follow the instructions.  That's it, got your files back 😄  The server has only two endpoints:  POST api/keys/add - Used by the malware to persist new keys. Some verifications are made, like the verification of the RSA autenticity. Returns 204 (empty content) in case of success or a json error.  GET api/keys/:id - Id is a 32 characters parameter, representing an Id already persisted. Returns a json containing the encryption key or a json error  The end As you can see, building a functional ransomware, with some of the best existing algorithms is not difficult, anyone with some programming skills can build that in any programming language.", "", 2021-04-14 14:09:31 +0000 UTC
13, VerifyDisneyPlus, https://github.com/sjlleo/VerifyDisneyPlus, "一个检测出口IP是否解锁DisneyPlus的脚本", "", 2021-04-11 12:13:43 +0000 UTC
13, gocover, https://github.com/kjellkvinge/gocover, "test coverage analysis in your terminal", "", 2021-05-04 20:46:52 +0000 UTC
13, fm, https://github.com/knipferrc/fm, "A terminal based file manager", "go,golang,filemanager,bubbles,bubbletea,lipgloss", 2021-04-11 14:03:28 +0000 UTC
13, students-api, https://github.com/lucasnevespereira/students-api, "Students REST API written in Go", "", 2021-04-11 16:20:02 +0000 UTC
13, strobemers, https://github.com/shenwei356/strobemers, "A Go implementation of the strobemers (https://github.com/ksahlin/strobemers)", "strobemers", 2021-04-13 02:36:33 +0000 UTC
13, sqlapi, https://github.com/ciceksepetitech/sqlapi, "SQL API is designed to be able to run SQL queries on relational databases without any configuration by simple HTTP call.", "", 2021-05-05 13:19:44 +0000 UTC
13, pipeline, https://github.com/deliveryhero/pipeline, "A library to help you create pipelines in Golang ", "", 2021-04-14 07:44:47 +0000 UTC
12, vjson, https://github.com/miladibra10/vjson, "vjson is a golang package that helps to validate JSON objects", "golang,json,schema,json-validation,golang-json,json-validator", 2021-04-29 16:47:50 +0000 UTC
12, vscode-readme, https://github.com/ThreeCommaIO/vscode-readme, "README snippets for Visual Code inspired by readme.so", "", 2021-05-01 23:18:02 +0000 UTC
12, cloud-fitter, https://github.com/cloud-fitter/cloud-fitter, "provide api for cloud service like aliyun, aws, google cloud, tencent cloud, huawei cloud and so on", "", 2021-04-11 07:47:22 +0000 UTC
12, nwg-menu, https://github.com/nwg-piotr/nwg-menu, "MenuStart plugin to nwg-panel, also capable of working standalone", "", 2021-04-20 20:47:17 +0000 UTC
11, sdwan-perf, https://github.com/zartbot/sdwan-perf, "A Small tool for SDWAN performance test and policy validation", "", 2021-04-17 10:40:17 +0000 UTC
11, fonts, https://github.com/go-swiss/fonts, "Fonts is a package that provides helpers to access font details and easily retrive font bytes with ZERO dependencies", "go,fonts,typography,google-fonts", 2021-04-17 16:35:44 +0000 UTC
11, flamego, https://github.com/flamego/flamego, "A fantastic modular Go web framework boiled with black magic.", "go,dependency-injection,web-framework,lsif-enabled,flamego", 2021-04-30 18:16:54 +0000 UTC
11, zipindex, https://github.com/minio/zipindex, "Package for indexing zip files and storing a compressed index", "", 2021-04-27 16:55:00 +0000 UTC
11, nebula-operator, https://github.com/vesoft-inc/nebula-operator, "Operation utilities for Nebula Graph", "", 2021-04-27 03:01:38 +0000 UTC
11, RunExploit, https://github.com/CobaltZirs0n/RunExploit, "go语言编写的一款基于json格式poc的漏洞利用工具", "", 2021-04-28 00:42:44 +0000 UTC
10, GoKey, https://github.com/gophers-latam/GoKey, "Primer proyecto OSS en comunidad sobre cache en memoria.", "golang,cache,especificaciones", 2021-04-15 01:18:43 +0000 UTC
10, ginlaravel, https://github.com/fyonecon/ginlaravel, "基于GO框架Gin开发，项目结构和理念参考Laravel。MySQL、Redis、MVC、拦截器、扩展函数、支持热更、支持模版输出、支持Api。", "mysql,redis,golang,mvc,fresh,gin,ginlaravel", 2021-04-14 15:08:39 +0000 UTC
10, bookstore-api, https://github.com/kianooshaz/bookstore-api, "bookstore-api is a server-side application that provides a service like bookstore, like buying and selling books, but it is actually a training project", "", 2021-04-26 05:15:33 +0000 UTC
10, ranna, https://github.com/ranna-go/ranna, "Experimental code execution microservice based on Docker containers.", "docker,microservice,restapi,docker-api,code-execution,code-execution-engine", 2021-04-23 17:27:19 +0000 UTC
10, optocannon, https://github.com/anthonyebiner/optocannon, "A simulated-annealing approach to solving a max-flow removal problem", "", 2021-05-06 06:05:13 +0000 UTC
9, singularity, https://github.com/sylabs/singularity, "SingularityCE is the Community Edition of Singularity, an open source container platform designed to be simple, fast, and secure.", "", 2021-05-04 13:40:42 +0000 UTC
9, versus-contracts, https://github.com/versus-flow/versus-contracts, "Contracts for the versus-flow.art project", "", 2021-04-28 20:34:45 +0000 UTC
9, bruh-s-power, https://github.com/ELPanaJose/bruh-s-power, "its the same idea as bruh-bot, but with golang, and add more bots", "", 2021-04-21 02:16:44 +0000 UTC
9, nomad-droplets-autoscaler, https://github.com/jsiebens/nomad-droplets-autoscaler, "", "", 2021-04-20 06:37:52 +0000 UTC
